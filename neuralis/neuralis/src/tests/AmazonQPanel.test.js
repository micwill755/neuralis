import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import AmazonQPanel from '../components/assistant/AmazonQPanel';
import { generateCodeFromPrompt } from '../services/amazonQService';

// Mock the amazonQService
jest.mock('../services/amazonQService', () => ({
  generateCodeFromPrompt: jest.fn()
}));

describe('AmazonQPanel Component', () => {
  const mockOnInsertCode = jest.fn();
  
  beforeEach(() => {
    jest.clearAllMocks();
  });
  
  test('renders the Amazon Q panel correctly', () => {
    render(<AmazonQPanel onInsertCode={mockOnInsertCode} />);
    
    // Check if the panel header is rendered
    expect(screen.getByText('Amazon Q Assistant')).toBeInTheDocument();
    
    // Check if the input area is rendered
    expect(screen.getByPlaceholderText('Ask Amazon Q to generate code...')).toBeInTheDocument();
    
    // Check if the generate button is rendered
    expect(screen.getByText('Generate Code')).toBeInTheDocument();
  });
  
  test('handles prompt submission and code generation', async () => {
    // Mock the service response
    const mockCode = '// Test code generated by Amazon Q';
    generateCodeFromPrompt.mockResolvedValue(mockCode);
    
    render(<AmazonQPanel onInsertCode={mockOnInsertCode} />);
    
    // Enter a prompt
    const promptInput = screen.getByPlaceholderText('Ask Amazon Q to generate code...');
    fireEvent.change(promptInput, { target: { value: 'Generate a function to calculate factorial' } });
    
    // Click the generate button
    const generateButton = screen.getByText('Generate Code');
    fireEvent.click(generateButton);
    
    // Wait for the response to be displayed
    await waitFor(() => {
      expect(screen.getByText(mockCode)).toBeInTheDocument();
    });
    
    // Check if the service was called with the correct prompt
    expect(generateCodeFromPrompt).toHaveBeenCalledWith('Generate a function to calculate factorial');
    
    // Check if the insert button appears
    const insertButton = screen.getByText('Insert into Notebook');
    expect(insertButton).toBeInTheDocument();
    
    // Click the insert button
    fireEvent.click(insertButton);
    
    // Check if the onInsertCode callback was called with the generated code
    expect(mockOnInsertCode).toHaveBeenCalledWith(mockCode);
  });
  
  test('handles error during code generation', async () => {
    // Mock the service to throw an error
    generateCodeFromPrompt.mockRejectedValue(new Error('Service error'));
    
    render(<AmazonQPanel onInsertCode={mockOnInsertCode} />);
    
    // Enter a prompt
    const promptInput = screen.getByPlaceholderText('Ask Amazon Q to generate code...');
    fireEvent.change(promptInput, { target: { value: 'Generate code' } });
    
    // Click the generate button
    const generateButton = screen.getByText('Generate Code');
    fireEvent.click(generateButton);
    
    // Wait for the error message to be displayed
    await waitFor(() => {
      expect(screen.getByText('Error: Failed to get response from Amazon Q')).toBeInTheDocument();
    });
  });
});
